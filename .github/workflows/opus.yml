on:
  # push:
  #   branches: [master]
  workflow_dispatch:
  pull_request:
    branches: [master]

name: Create opus Release

jobs:
  build:
    name: compile opus then deploy
    runs-on: macos-13
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Read Tag Version
      run: |
        # https://stackoverflow.com/questions/4916492/git-describe-fails-with-fatal-no-names-found-cannot-describe-anything
        # git describe --tags --always | awk -F . '{printf "RELEASE_VERSION=%s.%d",$1,$2+1}' | xargs > constants.env
        # git describe --tags --always | awk -F - '{printf "RELEASE_VERSION=V1.0-%s",$NF}' | xargs > constants.env
        d=$(TZ=UTC-8 date +'%y%m%d%H%M%S')
        LIB_NAME=opus
        grep GIT_REPO_VERSION= ./init-cfgs/$LIB_NAME | awk -F = '{printf "RELEASE_VERSION=%s",$2}' | xargs > constants.env
        echo "LIB_NAME=$LIB_NAME" >> constants.env
        echo "RELEASE_DATE=$d" >> constants.env
        echo "HOMEBREW_NO_AUTO_UPDATE=1" >> constants.env
        cat constants.env
    - name: Export Env
      uses: cardinalby/export-env-action@v2
      with:
        envFile: 'constants.env'
    - name: init src
      run: |
        ./main.sh init -p ios -l ${{ env.LIB_NAME }}
        ./main.sh init -p tvos -l ${{ env.LIB_NAME }}
        ./main.sh init -p macos -l ${{ env.LIB_NAME }}
    - name: generate src log
      run: |
        cd build/src/macos
        ls  | awk -F ' ' '{printf "echo %s\n echo -------------\ngit -C %s log -n 1 | cat\n",$0,$0}' | bash > ../macos-src-log.md
        cd ../ios
        ls  | awk -F ' ' '{printf "echo %s\n echo -------------\ngit -C %s log -n 1 | cat\n",$0,$0}' | bash > ../ios-src-log.md
        cd ../tvos
        ls  | awk -F ' ' '{printf "echo %s\n echo -------------\ngit -C %s log -n 1 | cat\n",$0,$0}' | bash > ../tvos-src-log.md
    - name: do compile macos libs
      run: |
        ./main.sh compile -p macos -c build -l ${{ env.LIB_NAME }}
        cd build/product/macos/universal
        zip -rq macos-universal.zip ./*
    - name: do compile ios libs
      run: |
        ./main.sh compile -p ios -c build -l ${{ env.LIB_NAME }}
        cd build/product/ios/universal
        zip -rq ios-universal.zip ./*
        cd ../universal-simulator
        zip -rq ios-universal-simulator.zip ./*
    - name: do compile tvos libs
      run: |
        ./main.sh compile -p tvos -c build -l ${{ env.LIB_NAME }}
        cd build/product/tvos/universal
        zip -rq tvos-universal.zip ./*
        cd ../universal-simulator
        zip -rq tvos-universal-simulator.zip ./*
    - name: Zip apple xcframework
      run: |
        cd build/product/xcframework
        zip -rq apple-xcframework.zip ./*
        mv apple-xcframework.zip ../
    - name: Create Release
      run: |
        tag=${{ env.LIB_NAME }}-${{ env.RELEASE_VERSION }}-${{ env.RELEASE_DATE }}
        title="üëèüëè${{ env.LIB_NAME }}-${{ env.RELEASE_VERSION }}"
        mkdir -p dist

        mv build/product/apple-xcframework.zip dist/${{ env.LIB_NAME }}-apple-xcframework-${{ env.RELEASE_VERSION }}.zip
        mv build/product/ios/universal/ios-universal.zip dist/${{ env.LIB_NAME }}-ios-universal-${{ env.RELEASE_VERSION }}.zip
        mv build/product/ios/universal-simulator/ios-universal-simulator.zip dist/${{ env.LIB_NAME }}-ios-universal-simulator-${{ env.RELEASE_VERSION }}.zip
        mv build/product/macos/universal/macos-universal.zip dist/${{ env.LIB_NAME }}-macos-universal-${{ env.RELEASE_VERSION }}.zip
        mv build/product/tvos/universal/tvos-universal.zip dist/${{ env.LIB_NAME }}-tvos-universal-${{ env.RELEASE_VERSION }}.zip
        mv build/product/tvos/universal-simulator/tvos-universal-simulator.zip dist/${{ env.LIB_NAME }}-tvos-universal-simulator-${{ env.RELEASE_VERSION }}.zip
        mv build/src/macos-src-log.md dist/macos-src-log-${{ env.RELEASE_VERSION }}.md
        mv build/src/ios-src-log.md dist/ios-src-log-${{ env.RELEASE_VERSION }}.md
        mv build/src/tvos-src-log.md dist/tvos-src-log-${{ env.RELEASE_VERSION }}.md

        gh release create $tag -p -t $title ./dist/*.*